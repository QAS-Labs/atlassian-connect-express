#!/usr/bin/env node
var fs = require("fs");
var colors = require("colors");
var _ = require("underscore");
var temp = require('temp');
var https = require("https");
var AdmZip = require('adm-zip');
var read = require('read');
var rimraf = require('rimraf');
var validCmds = [
  {
    "cmd": "help",
  },
  {
    "cmd": "new",
    "params": [
      {
        "param": "name",
        "description": "Name of the directory to create",
        "required": true
      }
    ]
  },
  {
    "cmd": "keygen"
  }
];
var argv = require('optimist')
  .usage(fs.readFileSync(fs.readFileSync(__dirname + "/ap3-usage.txt").toString()))
  .describe('h','Show usage')
  .alias('h','help')
  .check(checkCommands)
  .argv;

var cmd = argv._[0];
var params = argv._.slice(1,argv._.length);

switch(cmd){
  case "new":
    console.log(("Creating " + params[0] + "...").bold);
    var dlUrl = "https://bitbucket.org/atlassian/plugins-3-expressjs-template/get/master.zip";
    https.get(dlUrl, function(res){
      var data = [], dataLen = 0;
      res.on('data', function(chunk){
        data.push(chunk);
        dataLen += chunk.length;
      }).on('end', function(){
        var buf = new Buffer(dataLen);

        for (var i=0, len = data.length, pos = 0; i < len; i++) {
            data[i].copy(buf, pos);
            pos += data[i].length;
        }

        var zip = new AdmZip(buf);
        var zipEntries = zip.getEntries();
        var zipDir = "";

        fs.exists(params[0],function(err){
          if (err){
            read({
              prompt: params[0] + " already exists. Overwrite? [y/N]",
              default: "N"
            }, function(er, overwrite){
              if(overwrite.toLowerCase() === "y"){
                rimraf(params[0],function(err){
                  if(!err){
                    createScaffold();
                  }
                })
              }
            })
          } else {
            createScaffold();
          }

          function createScaffold(){
            temp.mkdir(params[0], function(err,dirPath){
              zip.extractAllTo(dirPath, true);
              zipEntries.forEach(function(zipEntry){
                zipDir = zipEntry.entryName.split('/')[0];
                var path = [params[0],zipEntry.entryName.split('/').slice(1).join('/')].join('/');
                console.log(("  " + path).yellow);
              });
              fs.renameSync([dirPath,zipDir].join('/'), params[0]);
              console.log(("\n"+params[0].green.bold +" has been created." + (" cd " + params[0]).green.bold + " then run " + "npm install".green.bold + " to install all dependencies.").yellow)
            });
          }
        });
      });
    });
    break;
  case "keygen":
    break
}

function checkCommands(argv){
  if(argv._.length === 0){
    throw "";
  }

  var cmd = argv._[0];
  var params = argv._.slice(1,argv._.length);
  var cmdIsValid = false;

  if(cmd.toLowerCase() === "help") {
    throw "";
  }
  var validCmd = _.where(validCmds, {cmd: cmd.toLowerCase()})
  if(validCmd.length > 0) {
    checkParams(params, validCmd[0])
  } else {
    throw ("`"+cmd + "` command not recognized").red;
  }
}

function checkParams(params, cmdSpec){
  var requiredParams = _.where(cmdSpec.params,{required: true});

  if (params.length < requiredParams.length) {
    var msg = ["`ap3",cmdSpec.cmd + "`", "requires the following parameters:\n\n"]
      .join(" ").red;

    var reqMsg = _.map(cmdSpec.params, function(val){
      return [val.param, " - " , val.description].join(" ");
    }).join("\n    ").red;
    throw msg + "    " + reqMsg + "\n";
  }
}